<?php

function poolcalculator_permission() {
  return array(
    'Access pool calculator admin' => array(
      'title' => t('Access Pool Calculator Admin'),
      'description' => t('Access the Pool Calculator Admin section'),
    ),
  );
}

function poolcalculator_menu() {

	$items['admin/pool/runstats'] = array(
		'title' => 'Run EuroPool Stats',
		'description' => 'Calculates the pool stats given the latest config',
  	'page callback' => 'poolcalculator_runstats',
		'access arguments' => array('Access pool calculator admin'),
	);

	$items['standings'] = array(
		'title' => 'STANDINGS',
		'description' => 'Shows the current standings',
  	'page callback' => 'poolcalculator_showStandings',
		'access callback' => true,
	);

	$items['admin/pool/debug'] = array(
		'title' => 'DEBUG EuroPool Stats',
		'description' => 'Pool Stats Debug',
  	'page callback' => 'poolcalculator_debug',
		'access arguments' => array('Access pool calculator admin'),
	);

	$items['pool/info'] = array(
		'title' => 'Welcome',
		'description' => 'Instructions and Rules',
  	'page callback' => 'poolcalculator_info',
		'access callback' => true,
	);

	$items['teamgroup'] = array(
		'title' => 'Group Standings',
		'description' => 'Team Group Standings',
  	'page callback' => 'poolcalculator_teamGroupStandings',
		'access callback' => true,
	);

	$items['playergroup'] = array(
		'title' => 'Group Standings',
		'description' => 'Player Group Standings',
  	'page callback' => 'poolcalculator_playerGroupStandings',
		'access callback' => true,
	);

	return $items;

}

function poolcalculator_teamGroupStandings($gid) {
	
	module_load_include('inc', 'poolcalculator', 'poolcalculator.stats');

	$group = poolcalculator_getSelectionArray(constant($gid));
	$out = '<div><table><th>PICK</th><th>WINS</th><th>DRAWS</th><th>BONUS</th><th>POINTS</th>';

	foreach($group as $i => $g) {
		$out .= '<tr><td>'.poolcalculator_formatCellContent($g).'</td>';
		$out .= '<td>'.poolcalculator_getTeamWins(constant($g)).'</td>';
		$out .= '<td>'.poolcalculator_getTeamDraws_NumORPoints(constant($g)).'</td>';
		$out .= '<td>'.poolcalculator_getTeamBonusPoints(constant($g)).'</td>';
		$out .= '<td>'.poolcalculator_getTeamTotalPoints(constant($g)).'</td>';
		$out .= '</tr>';
	}

	$out .= '</table></div>';
	return $out;	
}

function poolcalculator_playerGroupStandings($gid) {
	
	module_load_include('inc', 'poolcalculator', 'poolcalculator.stats');

	$group = poolcalculator_getSelectionArray(constant($gid));
	$out = '<div><table><th>PICK</th><th>GOALS</th><th>BONUS</th><th>POINTS</th>';

	foreach($group as $i => $g) {
		$out .= '<tr><td>'.$g.'</td>';
		$out .= '<td>'.poolcalculator_getPlayerGoals(constant($g)).'</td>';
		$out .= '<td>'.poolcalculator_getPlayerBonusPoints(constant($g)).'</td>';
		$out .= '<td>'.poolcalculator_getPlayerTotalPoints(constant($g)).'</td>';
		$out .= '</tr>';
	}

	$out .= '</table></div>';
	return $out;	
}

function poolcalculator_GroupTitle($gid) {
	echo '<xmp>'.$gid.'</xmp>';
	return 'Group '.$gid.' Standings';
}

function poolcalculator_info() {

	$out = '<p>You need a login to get started. If you didn\'t get an email with login info, let me know. If you want to invite anyone else into the pool then send me their email address.</p>';

	$out .= '<h3>Easier to Remember Site Link</h3>';
	$out .= '<a href="http://bit.ly/europool2016">http://bit.ly/europool2016</a>';

	$out .= '<h3>Rules</h3>';
	$out .= '<ul><li>Same point scoring as previous years:</li>';
	$out .= '<ul><li>Team Brackets: 3 points per Win, 1 point per Draw</li>';
	$out .= '<li>Player Brackets: 2 points per Goal</li>';
	$out .= '<li>3 point bonus awarded to top point getter in each bracket</li></ul>';
	$out .= '<li>Max 3 entries allowed per person</li>';
	$out .= '<li>$10 per entry</li>';
	$out .= '<li>Payout: <strong>1st - $100&nbsp;&nbsp;&nbsp;2nd - $40</strong></li></ul>';
	
	$out .= '<h3>Instructions</h3>';
	$out .= '<ul><li>Login</li>';
	$out .= '<li>Click "Add Content" (under Navigation), and fill out form.</li>';
	$out .= '<li>You can create/edit your teams up until midnight on Thursday June 9th</li>';
	$out .= '<li>Once the tournament starts, check back here for standings</li></ul>';
		
	return $out;

}

function poolcalculator_debug() {

	module_load_include('inc', 'poolcalculator', 'poolcalculator.stats');

	$entries = poolcalculator_loadAllTeams();
	$stats = array();
	$rank = array();

	foreach($entries as $entry) {
		$stats[$entry->title] = poolcalculator_calcEntryPoints($entry);
		$rank[$entry->title] = $stats[$entry->title]['total'];
	}
	arsort($rank, SORT_NUMERIC);
	
	echo '<xmp>';
	print_r($stats);
	echo '</xmp>';

	echo '<xmp>';
	print_r($rank);
	echo '</xmp>';
	return;	
}

function poolcalculator_showStandings() {

	$standings = poolcalculator_runstats();
	
	$out .= '<h3>'.LAST_UPDATE.'</h3>';
	$out .= $standings;
	return $out;

}

function poolcalculator_runstats() {

	module_load_include('inc', 'poolcalculator', 'poolcalculator.stats');

	$entries = poolcalculator_loadAllTeams();
	$stats = array();
	$rank = array();

	foreach($entries as $entry) {
		$stats[$entry->title] = poolcalculator_calcEntryPoints($entry);
		$rank[$entry->title] = $stats[$entry->title]['total'];
	}

	arsort($rank, SORT_NUMERIC);
	return poolcalculator_formatResults($stats, $rank);
}

function poolcalculator_calcEntryPoints($entry) {

	$selections = poolcalculator_getEntrySelections($entry);
	$table = array();
	$selection_total_pts = 0;
	
	foreach($selections as $key => $val) {
		$pts = array();

		if(substr($key, 0, 1) === 'T') poolcalculator_calcEntryPointsTeam($key, $val, $pts, $selection_total_pts);
		elseif(substr($key, 0, 1) === 'P') poolcalculator_calcEntryPointsPlayer($key, $val, $pts, $selection_total_pts);

		$table[] = $pts;
	}
	
	$table['link'] = 'node/'.$entry->nid;
	$table['total'] = $selection_total_pts;

	$user = user_load($entry->uid);
	$table['owner'] = $user->field_full_name['und'][0]['value'];
	
	return $table;	
}

function poolcalculator_calcEntryPointsTeam($key, $val, &$pts, &$selection_total_pts) {

	$pts[] = $key;
	$pts[] = $val;
	$pts[] = poolcalculator_getTeamWins(constant($val));
	$pts[] = poolcalculator_getTeamDraws_NumORPoints(constant($val));
	$pts[] = poolcalculator_getTeamBonusPoints(constant($val));
	$tot = poolcalculator_getTeamTotalPoints(constant($val));
	$pts[] = $tot;
	$selection_total_pts += $tot;
}

function poolcalculator_calcEntryPointsPlayer($key, $val, &$pts, &$selection_total_pts) {

	$pts[] = $key;
	$pts[] = $val;
	$pts[] = poolcalculator_getPlayerGoals(constant($val));
	$pts[] = poolcalculator_getPlayerBonusPoints(constant($val));
	$tot = poolcalculator_getPlayerTotalPoints(constant($val));
	$pts[] = $tot;
	$selection_total_pts += $tot;
}

function poolcalculator_getEntrySelections($entry) {

	$selections = array();

	for($i=1; $i<=TEAM_POTS; $i++) {
		$field_name = "field_team_$i";
		$x = &$entry->$field_name;
		$selections["T$i"] = $x['und'][0]['value'];
	}

	for($j=1; $j<=PLAYER_POTS; $j++) {
		$field_name = "field_player_$j";
		$y = &$entry->$field_name;
		$selections["P$j"] = $y['und'][0]['value'];
	}

	return $selections;
}

function poolcalculator_formatResults($stats, $rank) {

	$out = '';
	foreach($rank as $team_name => $tot) {

		$out .= '<div class="standings closed"><div class="standings-head"><table class="pool"><th><span class="head-plus">+</span><span class="head-minus">-</span>'.$team_name.'</th><th><strong>POINTS: '.$tot.'</strong></th><th>'.$stats[$team_name]['owner'].'</th></table></div>';
		$out .= '<div class="standings-grid"><table><tr><th>GROUP</th><th>PICK</th><th>WINS/GOALS</th><th>DRAWS</th><th>BONUS</th><th>PTS</th></tr>';	

		foreach($stats[$team_name] as $i => $arr) {
			if(is_numeric($i)) {
				$out .= '<tr>';
				if(substr($arr[0], 0, 1) === 'P') {
				  array_splice($arr, 3, 0, '-');
				}
				foreach($arr as $vals) $out .= '<td>'.poolcalculator_formatCellContent($vals).'</td>';
				$out .= '</tr>';
			}
		}		
		$out .= '</table></div></div>';
	}	
	return $out;
}

function poolcalculator_formatCellContent($name) {

	$check = $name.'_FORMATTED';
	if(defined($check)) return constant($check);

	elseif((strlen($name)==2) && (substr($name, 0, 1) === 'T')) {
			return l($name, '/teamgroup/'.$name, array('attributes' => array('class' => 'grid-link', 'target' => '_blank')));
	}
	elseif((strlen($name)==2) && (substr($name, 0, 1) === 'P')) {
			return l($name, '/playergroup/'.$name);
	}

	return $name;
}

function poolcalculator_loadAllTeams() {

	$nids = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('type', 'pool_entry', '=')
    ->execute()
    ->fetchCol();
  
  return node_load_multiple($nids);
}



function poolcalculator_getPlayerGoals($player) {
	$ply_array = poolcalculator_getSelectionArray($player);
	return $ply_array[0];
}

function poolcalculator_getPlayerBonusPoints($player) {
	$ply_array = poolcalculator_getSelectionArray($player);
	return $ply_array[1];
}

function poolcalculator_getPlayerGoalPoints($player) {
	$ply_array = poolcalculator_getSelectionArray($player);
	return $ply_array[0]*2;
}

function poolcalculator_getPlayerTotalPoints($player) {
  return poolcalculator_getPlayerGoalPoints($player) + poolcalculator_getPlayerBonusPoints($player);
}

function poolcalculator_getTeamWins($team) {
	$team_array = poolcalculator_getSelectionArray($team);
	return $team_array[0];
}

function poolcalculator_getTeamDraws_NumORPoints($team) {
	$team_array = poolcalculator_getSelectionArray($team);
	return $team_array[1];
}

function poolcalculator_getTeamWinPoints($team) {
	$team_array = poolcalculator_getSelectionArray($team);
	return $team_array[0]*3;
}

function poolcalculator_getTeamBonusPoints($team) {
	$team_array = poolcalculator_getSelectionArray($team);
	return $team_array[2]*3;
}

function poolcalculator_getTeamTotalPoints($team) {
	return poolcalculator_getTeamWinPoints($team) + poolcalculator_getTeamDraws_NumORPoints($team) + poolcalculator_getTeamBonusPoints($team);
}

function poolcalculator_getSelectionArray($team) {
	return unserialize($team);
}
